{"version":3,"file":"utils.esm.js","sources":["src/type/check.ts"],"sourcesContent":["// ================================================================\n// Primitives\n\nexport const isString = (value: unknown): value is string =>\n  typeof value === 'string';\n\nexport const isNumber = (value: unknown): value is number =>\n  typeof value === 'number';\n\nexport const isBoolean = (value: unknown): value is boolean =>\n  typeof value === 'boolean';\n\nexport const isBigInt = (value: unknown): value is bigint =>\n  typeof value === 'bigint';\n\nexport const isSymbol = (value: unknown): value is symbol =>\n  typeof value === 'symbol';\n\nexport const isPrimitives = (\n  value: unknown,\n): value is string | number | boolean | bigint | symbol => {\n  const t = typeof value;\n  return (\n    t === 'string' ||\n    t === 'number' ||\n    t === 'boolean' ||\n    t === 'bigint' ||\n    t === 'symbol'\n  );\n};\n\n// ================================================================\n// Function\n\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function';\n\n// ================================================================\n// Object\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  value !== null && typeof value === 'object';\n\nexport const objectToString = Object.prototype.toString;\nexport const toTypeString = (value: unknown): string =>\n  objectToString.call(value);\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nexport const hasOwn = (\n  value: object,\n  key: string | symbol,\n): key is keyof typeof value => hasOwnProperty.call(value, key);\n\nexport const toRawType = (value: unknown): string => {\n  // extract \"RawType\" from strings like \"[object RawType]\"\n  return toTypeString(value).slice(8, -1);\n};\n\nexport const isPlainObject = (value: unknown): value is object =>\n  toTypeString(value) === '[object Object]';\n\nexport const isArray: <V = any>(value: unknown) => value is V[] = Array.isArray;\n\nexport const isMap = <K = any, V = any>(value: unknown): value is Map<K, V> =>\n  toTypeString(value) === '[object Map]';\n\nexport const isSet = <V = any>(value: unknown): value is Set<V> =>\n  toTypeString(value) === '[object Set]';\n\nexport const isPromise = <T = any>(value: unknown): value is Promise<T> =>\n  isObject(value) && isFunction(value.then) && isFunction(value.catch);\n"],"names":["isString","value","isNumber","isBoolean","isBigInt","isSymbol","isPrimitives","t","isFunction","isObject","objectToString","Object","prototype","toString","toTypeString","call","hasOwnProperty","hasOwn","key","toRawType","slice","isPlainObject","isArray","Array","isMap","isSet","isPromise","then","catch"],"mappings":"MAGaA,EAAYC,GACN,iBAAVA,EAEIC,EAAYD,GACN,iBAAVA,EAEIE,EAAaF,GACP,kBAAVA,EAEIG,EAAYH,GACN,iBAAVA,EAEII,EAAYJ,GACN,iBAAVA,EAEIK,EACXL,UAEMM,SAAWN,QAET,WAANM,GACM,WAANA,GACM,YAANA,GACM,WAANA,GACM,WAANA,GAOSC,EAAcP,GACR,mBAAVA,EAKIQ,EAAYR,GACb,OAAVA,GAAmC,iBAAVA,EAEdS,EAAiBC,OAAOC,UAAUC,SAClCC,EAAgBb,GAC3BS,EAAeK,KAAKd,GAEhBe,EAAiBL,OAAOC,UAAUI,eAC3BC,EAAS,CACpBhB,EACAiB,IAC8BF,EAAeD,KAAKd,EAAOiB,GAE9CC,EAAalB,GAEjBa,EAAab,GAAOmB,MAAM,MAGtBC,EAAiBpB,GACJ,oBAAxBa,EAAab,GAEFqB,EAAqDC,MAAMD,QAE3DE,EAA2BvB,GACd,iBAAxBa,EAAab,GAEFwB,EAAkBxB,GACL,iBAAxBa,EAAab,GAEFyB,EAAsBzB,GACjCQ,EAASR,IAAUO,EAAWP,EAAM0B,OAASnB,EAAWP,EAAM2B"}